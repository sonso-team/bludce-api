name: –ë–ª—é–¥—Ü–µ API

on:
  push: {}            # –ó–∞–ø—É—Å–∫ –Ω–∞ –∫–∞–∂–¥—ã–π –∫–æ–º–º–∏—Ç –≤–æ –≤—Å–µ—Ö –≤–µ—Ç–∫–∞—Ö

env:
  JAVA_VERSION: '21'
  TARGET_DIR: /home/kinoko/bludce/api
  BACKUP_DIR: /home/kinoko/backup/bludce
  JAR_DIR: /tmp/bludce

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Upload artifacts
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v4
        with:
          name: app-jars
          path: '**/build/libs/*.jar'

  deploy:
    if: github.ref == 'refs/heads/master'
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create backup
        run: |
          if [ -d "${{ env.TARGET_DIR }}" ]; then
            sudo mkdir -p "${{ env.BACKUP_DIR }}"
            sudo cp -r "${{ env.TARGET_DIR }}"/* "${{ env.BACKUP_DIR }}"
            echo "‚úÖ Backup —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
          else
            echo "‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–ø–ª–æ—è, –±–µ–∫–∞–ø –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è"
          fi

      - name: Stop existing containers
        run: |
          if [ -f "${{ env.TARGET_DIR }}/docker-compose.yml" ]; then
            docker compose -f "${{ env.TARGET_DIR }}/docker-compose.yml" down
          fi

      - name: Clean target dir
        run: |
          sudo rm -rf "${{ env.TARGET_DIR }}"
          sudo mkdir -p "${{ env.TARGET_DIR }}"

      - name: Copy project files
        run: |
          sudo cp -r ./* "${{ env.TARGET_DIR }}"
          sudo chown -R kinoko:kinoko "${{ env.TARGET_DIR }}"

      - name: Download JAR artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-jars
          path: "${{ env.JAR_DIR }}"

      - name: Move JARs to target
        run: |
          sudo cp -r "${{ env.JAR_DIR }}"/*.jar "${{ env.TARGET_DIR }}"
          sudo rm -rf "${{ env.JAR_DIR }}"

      - name: Deploy via Docker Compose
        run: |
          docker compose -f "${{ env.TARGET_DIR }}/docker-compose.yml" up --build -d
          sleep 30
          if docker compose -f "${{ env.TARGET_DIR }}/docker-compose.yml" logs | grep -iq "ERROR"; then
            echo "üö® –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∞—Ö!"
            docker compose -f "${{ env.TARGET_DIR }}/docker-compose.yml" logs
            exit 1
          else
            echo "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω, –æ—à–∏–±–æ–∫ –Ω–µ—Ç"
          fi

      - name: Cleanup backup after success
        run: |
          sudo rm -rf "${{ env.BACKUP_DIR }}"
          echo "üßπ –û—á–∏—Å—Ç–∫–∞ –±–µ–∫–∞–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç..."
          docker compose -f "${{ env.TARGET_DIR }}/docker-compose.yml" down || true
          sudo rm -rf "${{ env.TARGET_DIR }}"
          if [ -d "${{ env.BACKUP_DIR }}" ]; then
            sudo mv "${{ env.BACKUP_DIR }}" "${{ env.TARGET_DIR }}"
            sudo chown -R kinoko:kinoko "${{ env.TARGET_DIR }}"
            docker compose -f "${{ env.TARGET_DIR }}/docker-compose.yml" up -d
            echo "‚úÖ –û—Ç–∫–∞—Ç —É—Å–ø–µ—à–µ–Ω"
          else
            echo "‚ö†Ô∏è –û—Ç–∫–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –Ω–µ—Ç –±–µ–∫–∞–ø–∞"
          fi
